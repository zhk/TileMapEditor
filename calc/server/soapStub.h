/* soapStub.h
   Generated by gSOAP 2.8.0 from DataCenter.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns2	"urn:DataCenter"
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_BlockKeyType
#define SOAP_TYPE_BlockKeyType (10)
/* BlockKeyType */
struct BlockKeyType
{
public:
	std::string appKey;	/* required element of type xsd:string */
	std::string regionKey;	/* required element of type xsd:string */
	std::string dataType;	/* required element of type xsd:string */
	std::string dataKey;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_BlockDataType
#define SOAP_TYPE_BlockDataType (11)
/* BlockDataType */
struct BlockDataType
{
public:
	std::string dataCheckSum;	/* required element of type xsd:string */
	std::string data;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns2__setData
#define SOAP_TYPE_ns2__setData (16)
/* ns2:setData */
struct ns2__setData
{
public:
	struct BlockKeyType *key;	/* optional element of type BlockKeyType */
	struct BlockDataType *blockdata;	/* optional element of type BlockDataType */
};
#endif

#ifndef SOAP_TYPE_ns2__getDataResponse
#define SOAP_TYPE_ns2__getDataResponse (19)
/* ns2:getDataResponse */
struct ns2__getDataResponse
{
public:
	std::string data;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns2__getData
#define SOAP_TYPE_ns2__getData (20)
/* ns2:getData */
struct ns2__getData
{
public:
	struct BlockKeyType *key;	/* optional element of type BlockKeyType */
};
#endif

#ifndef SOAP_TYPE_ns2__getDataCheckSumResponse
#define SOAP_TYPE_ns2__getDataCheckSumResponse (22)
/* ns2:getDataCheckSumResponse */
struct ns2__getDataCheckSumResponse
{
public:
	std::string checkSum;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns2__getDataCheckSum
#define SOAP_TYPE_ns2__getDataCheckSum (23)
/* ns2:getDataCheckSum */
struct ns2__getDataCheckSum
{
public:
	struct BlockKeyType *key;	/* optional element of type BlockKeyType */
};
#endif

#ifndef SOAP_TYPE_ns2__addResponse
#define SOAP_TYPE_ns2__addResponse (27)
/* ns2:addResponse */
struct ns2__addResponse
{
public:
	double result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:double */
};
#endif

#ifndef SOAP_TYPE_ns2__add
#define SOAP_TYPE_ns2__add (28)
/* ns2:add */
struct ns2__add
{
public:
	double a;	/* required element of type xsd:double */
	double b;	/* required element of type xsd:double */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (29)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (30)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (32)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (34)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (35)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (9)
typedef std::string xsd__string;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
