/* soapDataCenterServerService.cpp
   Generated by gSOAP 2.8.0 from DataCenter.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapDataCenterServerService.h"

DataCenterServerService::DataCenterServerService()
{	DataCenterServerService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

DataCenterServerService::DataCenterServerService(const struct soap &_soap) :soap(_soap)
{ }

DataCenterServerService::DataCenterServerService(soap_mode iomode)
{	DataCenterServerService_init(iomode, iomode);
}

DataCenterServerService::DataCenterServerService(soap_mode imode, soap_mode omode)
{	DataCenterServerService_init(imode, omode);
}

DataCenterServerService::~DataCenterServerService()
{ }

void DataCenterServerService::DataCenterServerService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns2", "urn:DataCenter", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	this->namespaces = namespaces;
};

void DataCenterServerService::destroy()
{	soap_destroy(this);
	soap_end(this);
}

DataCenterServerService *DataCenterServerService::copy()
{	DataCenterServerService *dup = SOAP_NEW_COPY(DataCenterServerService(*(struct soap*)this));
	return dup;
}

int DataCenterServerService::soap_close_socket()
{	return soap_closesock(this);
}

int DataCenterServerService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this, string, detailXML);
}

int DataCenterServerService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this, subcodeQName, string, detailXML);
}

int DataCenterServerService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this, string, detailXML);
}

int DataCenterServerService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this, subcodeQName, string, detailXML);
}

void DataCenterServerService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void DataCenterServerService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *DataCenterServerService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

void DataCenterServerService::soap_noheader()
{	header = NULL;
}

int DataCenterServerService::run(int port)
{	if (soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()))
				return this->error;
			(void)serve();
			soap_destroy(this);
			soap_end(this);
		}
	}
	else
		return this->error;
	return SOAP_OK;
}

SOAP_SOCKET DataCenterServerService::bind(const char *host, int port, int backlog)
{	return soap_bind(this, host, port, backlog);
}

SOAP_SOCKET DataCenterServerService::accept()
{	return soap_accept(this);
}

int DataCenterServerService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->max_keep_alive;
#endif
	do
	{	soap_begin(this);
#ifdef WITH_FASTCGI
		if (FCGI_Accept() < 0)
		{
			this->error = SOAP_EOF;
			return soap_send_fault(this);
		}
#endif

		soap_begin(this);

#ifndef WITH_FASTCGI
		if (this->max_keep_alive > 0 && !--k)
			this->keep_alive = 0;
#endif

		if (soap_begin_recv(this))
		{	if (this->error < SOAP_STOP)
			{
#ifdef WITH_FASTCGI
				soap_send_fault(this);
#else 
				return soap_send_fault(this);
#endif
			}
			soap_closesock(this);

			continue;
		}

		if (soap_envelope_begin_in(this)
		 || soap_recv_header(this)
		 || soap_body_begin_in(this)
		 || dispatch() || (this->fserveloop && this->fserveloop(this)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this);
#else
			return soap_send_fault(this);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this);
		soap_end(this);
	} while (1);
#else
	} while (this->keep_alive);
#endif
	return SOAP_OK;
}

static int serve_ns2__setData(DataCenterServerService*);
static int serve_ns2__getData(DataCenterServerService*);
static int serve_ns2__getDataCheckSum(DataCenterServerService*);
static int serve_ns2__add(DataCenterServerService*);

int DataCenterServerService::dispatch()
{	soap_peek_element(this);
	if (!soap_match_tag(this, this->tag, "ns2:setData"))
		return serve_ns2__setData(this);
	if (!soap_match_tag(this, this->tag, "ns2:getData"))
		return serve_ns2__getData(this);
	if (!soap_match_tag(this, this->tag, "ns2:getDataCheckSum"))
		return serve_ns2__getDataCheckSum(this);
	if (!soap_match_tag(this, this->tag, "ns2:add"))
		return serve_ns2__add(this);
	return this->error = SOAP_NO_METHOD;
}

static int serve_ns2__setData(DataCenterServerService *soap)
{	struct ns2__setData soap_tmp_ns2__setData;
	soap_default_ns2__setData(soap, &soap_tmp_ns2__setData);
	soap->encodingStyle = "";
	if (!soap_get_ns2__setData(soap, &soap_tmp_ns2__setData, "ns2:setData", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->setData(soap_tmp_ns2__setData.key, soap_tmp_ns2__setData.blockdata);
	if (soap->error)
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns2__getData(DataCenterServerService *soap)
{	struct ns2__getData soap_tmp_ns2__getData;
	struct ns2__getDataResponse soap_tmp_ns2__getDataResponse;
	soap_default_ns2__getDataResponse(soap, &soap_tmp_ns2__getDataResponse);
	soap_default_ns2__getData(soap, &soap_tmp_ns2__getData);
	soap->encodingStyle = "";
	if (!soap_get_ns2__getData(soap, &soap_tmp_ns2__getData, "ns2:getData", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->getData(soap_tmp_ns2__getData.key, soap_tmp_ns2__getDataResponse.data);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns2__getDataResponse(soap, &soap_tmp_ns2__getDataResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__getDataResponse(soap, &soap_tmp_ns2__getDataResponse, "ns2:getDataResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__getDataResponse(soap, &soap_tmp_ns2__getDataResponse, "ns2:getDataResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns2__getDataCheckSum(DataCenterServerService *soap)
{	struct ns2__getDataCheckSum soap_tmp_ns2__getDataCheckSum;
	struct ns2__getDataCheckSumResponse soap_tmp_ns2__getDataCheckSumResponse;
	soap_default_ns2__getDataCheckSumResponse(soap, &soap_tmp_ns2__getDataCheckSumResponse);
	soap_default_ns2__getDataCheckSum(soap, &soap_tmp_ns2__getDataCheckSum);
	soap->encodingStyle = "";
	if (!soap_get_ns2__getDataCheckSum(soap, &soap_tmp_ns2__getDataCheckSum, "ns2:getDataCheckSum", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->getDataCheckSum(soap_tmp_ns2__getDataCheckSum.key, soap_tmp_ns2__getDataCheckSumResponse.checkSum);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns2__getDataCheckSumResponse(soap, &soap_tmp_ns2__getDataCheckSumResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__getDataCheckSumResponse(soap, &soap_tmp_ns2__getDataCheckSumResponse, "ns2:getDataCheckSumResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__getDataCheckSumResponse(soap, &soap_tmp_ns2__getDataCheckSumResponse, "ns2:getDataCheckSumResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns2__add(DataCenterServerService *soap)
{	struct ns2__add soap_tmp_ns2__add;
	struct ns2__addResponse soap_tmp_ns2__addResponse;
	soap_default_ns2__addResponse(soap, &soap_tmp_ns2__addResponse);
	soap_default_ns2__add(soap, &soap_tmp_ns2__add);
	soap->encodingStyle = "";
	if (!soap_get_ns2__add(soap, &soap_tmp_ns2__add, "ns2:add", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->add(soap_tmp_ns2__add.a, soap_tmp_ns2__add.b, soap_tmp_ns2__addResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns2__addResponse(soap, &soap_tmp_ns2__addResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__addResponse(soap, &soap_tmp_ns2__addResponse, "ns2:addResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__addResponse(soap, &soap_tmp_ns2__addResponse, "ns2:addResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
