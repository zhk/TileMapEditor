/* soapDataCenterServerProxy.h
   Generated by gSOAP 2.8.0 from DataCenter.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapDataCenterServerProxy_H
#define soapDataCenterServerProxy_H
#include "soapH.h"

class SOAP_CMAC DataCenterServerProxy : public soap
{ public:
	/// Endpoint URL of service 'DataCenterServerProxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	DataCenterServerProxy();
	/// Constructor with copy of another engine state
	DataCenterServerProxy(const struct soap&);
	/// Constructor with engine input+output mode control
	DataCenterServerProxy(soap_mode iomode);
	/// Constructor with engine input and output mode control
	DataCenterServerProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~DataCenterServerProxy();
	/// Initializer used by constructors
	virtual	void DataCenterServerProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (uses soap_destroy and soap_end)
	virtual	void destroy();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Force close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
	virtual	void soap_stream_fault(std::ostream&);
	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service one-way send operation 'send_setData' (returns error code or SOAP_OK)
	virtual	int send_setData(struct BlockKeyType *key, struct BlockDataType *blockdata);
	/// Web service one-way receive operation 'recv_setData' (returns error code or SOAP_OK);
	virtual	int recv_setData(struct ns2__setData&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_setData' (returns error code or SOAP_OK)
	virtual	int recv_setData_empty_response() { return soap_recv_empty_response(this); }
	/// Web service one-way synchronous send operation 'setData' with HTTP Accept/OK response receive (returns error code or SOAP_OK)
	virtual	int setData(struct BlockKeyType *key, struct BlockDataType *blockdata) { if (send_setData(key, blockdata) || soap_recv_empty_response(this)) return this->error; return SOAP_OK; }

	/// Web service operation 'getData' (returns error code or SOAP_OK)
	virtual	int getData(struct BlockKeyType *key, std::string &data);

	/// Web service operation 'getDataCheckSum' (returns error code or SOAP_OK)
	virtual	int getDataCheckSum(struct BlockKeyType *key, std::string &checkSum);

	/// Web service operation 'add' (returns error code or SOAP_OK)
	virtual	int add(double a, double b, double &result);
};
#endif
