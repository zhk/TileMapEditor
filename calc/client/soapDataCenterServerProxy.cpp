/* soapDataCenterServerProxy.cpp
   Generated by gSOAP 2.8.0 from DataCenter.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapDataCenterServerProxy.h"

DataCenterServerProxy::DataCenterServerProxy()
{	DataCenterServerProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

DataCenterServerProxy::DataCenterServerProxy(const struct soap &_soap) : soap(_soap)
{ }

DataCenterServerProxy::DataCenterServerProxy(soap_mode iomode)
{	DataCenterServerProxy_init(iomode, iomode);
}

DataCenterServerProxy::DataCenterServerProxy(soap_mode imode, soap_mode omode)
{	DataCenterServerProxy_init(imode, omode);
}

void DataCenterServerProxy::DataCenterServerProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns2", "urn:DataCenter", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	this->namespaces = namespaces;
}

DataCenterServerProxy::~DataCenterServerProxy()
{ }

void DataCenterServerProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void DataCenterServerProxy::soap_noheader()
{	header = NULL;
}

const SOAP_ENV__Fault *DataCenterServerProxy::soap_fault()
{	return this->fault;
}

const char *DataCenterServerProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *DataCenterServerProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int DataCenterServerProxy::soap_close_socket()
{	return soap_closesock(this);
}

void DataCenterServerProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void DataCenterServerProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *DataCenterServerProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int DataCenterServerProxy::send_setData(struct BlockKeyType *key, struct BlockDataType *blockdata)
{	struct soap *soap = this;
	struct ns2__setData soap_tmp_ns2__setData;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8090";
	soap->encodingStyle = "";
	soap_tmp_ns2__setData.key = key;
	soap_tmp_ns2__setData.blockdata = blockdata;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns2__setData(soap, &soap_tmp_ns2__setData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__setData(soap, &soap_tmp_ns2__setData, "ns2:setData", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__setData(soap, &soap_tmp_ns2__setData, "ns2:setData", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int DataCenterServerProxy::recv_setData(struct ns2__setData& tmp)
{
	struct soap *soap = this;
	struct ns2__setData *_param_1 = &tmp;
	soap_default_ns2__setData(soap, _param_1);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns2__setData(soap, _param_1, "ns2:setData", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int DataCenterServerProxy::getData(struct BlockKeyType *key, std::string &data)
{	struct soap *soap = this;
	struct ns2__getData soap_tmp_ns2__getData;
	struct ns2__getDataResponse *soap_tmp_ns2__getDataResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8090";
	soap->encodingStyle = "";
	soap_tmp_ns2__getData.key = key;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns2__getData(soap, &soap_tmp_ns2__getData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__getData(soap, &soap_tmp_ns2__getData, "ns2:getData", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__getData(soap, &soap_tmp_ns2__getData, "ns2:getData", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&data)
		return soap_closesock(soap);
	soap_default_xsd__string(soap, &data);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns2__getDataResponse = soap_get_ns2__getDataResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	data = soap_tmp_ns2__getDataResponse->data;
	return soap_closesock(soap);
}

int DataCenterServerProxy::getDataCheckSum(struct BlockKeyType *key, std::string &checkSum)
{	struct soap *soap = this;
	struct ns2__getDataCheckSum soap_tmp_ns2__getDataCheckSum;
	struct ns2__getDataCheckSumResponse *soap_tmp_ns2__getDataCheckSumResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8090";
	soap->encodingStyle = "";
	soap_tmp_ns2__getDataCheckSum.key = key;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns2__getDataCheckSum(soap, &soap_tmp_ns2__getDataCheckSum);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__getDataCheckSum(soap, &soap_tmp_ns2__getDataCheckSum, "ns2:getDataCheckSum", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__getDataCheckSum(soap, &soap_tmp_ns2__getDataCheckSum, "ns2:getDataCheckSum", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&checkSum)
		return soap_closesock(soap);
	soap_default_xsd__string(soap, &checkSum);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns2__getDataCheckSumResponse = soap_get_ns2__getDataCheckSumResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	checkSum = soap_tmp_ns2__getDataCheckSumResponse->checkSum;
	return soap_closesock(soap);
}

int DataCenterServerProxy::add(double a, double b, double &result)
{	struct soap *soap = this;
	struct ns2__add soap_tmp_ns2__add;
	struct ns2__addResponse *soap_tmp_ns2__addResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8090";
	soap->encodingStyle = "";
	soap_tmp_ns2__add.a = a;
	soap_tmp_ns2__add.b = b;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns2__add(soap, &soap_tmp_ns2__add);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__add(soap, &soap_tmp_ns2__add, "ns2:add", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__add(soap, &soap_tmp_ns2__add, "ns2:add", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_double(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns2__addResponse = soap_get_ns2__addResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns2__addResponse->result;
	return soap_closesock(soap);
}
/* End of client proxy code */
